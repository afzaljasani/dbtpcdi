{"metadata": {"dbt_schema_version": "https://schemas.getdbt.com/dbt/run-results/v4.json", "dbt_version": "1.4.6", "generated_at": "2023-04-20T12:23:12.862179Z", "invocation_id": "a6fe138e-c0a3-4432-b084-4bb13b916dca", "env": {}}, "results": [{"status": "success", "timing": [{"name": "compile", "started_at": "2023-04-20T12:22:53.583458Z", "completed_at": "2023-04-20T12:22:53.614883Z"}, {"name": "execute", "started_at": "2023-04-20T12:22:53.615320Z", "completed_at": "2023-04-20T12:22:57.788719Z"}], "thread_id": "Thread-1", "execution_time": 4.491137981414795, "adapter_response": {"_message": "OK"}, "message": "OK", "failures": null, "unique_id": "model.dbsql_dbt_tpch.DimBroker"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2023-04-20T12:22:53.587332Z", "completed_at": "2023-04-20T12:22:53.620220Z"}, {"name": "execute", "started_at": "2023-04-20T12:22:53.620637Z", "completed_at": "2023-04-20T12:22:58.004374Z"}], "thread_id": "Thread-2", "execution_time": 4.696715593338013, "adapter_response": {"_message": "OK"}, "message": "OK", "failures": null, "unique_id": "model.dbsql_dbt_tpch.DimCompany"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2023-04-20T12:22:53.592466Z", "completed_at": "2023-04-20T12:22:53.635989Z"}, {"name": "execute", "started_at": "2023-04-20T12:22:53.636407Z", "completed_at": "2023-04-20T12:22:58.635864Z"}], "thread_id": "Thread-3", "execution_time": 5.325823783874512, "adapter_response": {"_message": "OK"}, "message": "OK", "failures": null, "unique_id": "model.dbsql_dbt_tpch.DimCustomerStg"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2023-04-20T12:22:53.599327Z", "completed_at": "2023-04-20T12:22:53.625306Z"}, {"name": "execute", "started_at": "2023-04-20T12:22:53.625715Z", "completed_at": "2023-04-20T12:23:01.803979Z"}], "thread_id": "Thread-4", "execution_time": 8.49228572845459, "adapter_response": {"_message": "OK"}, "message": "OK", "failures": null, "unique_id": "model.dbsql_dbt_tpch.tempDailyMarketHistorical"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2023-04-20T12:22:58.286325Z", "completed_at": "2023-04-20T12:22:58.315199Z"}, {"name": "execute", "started_at": "2023-04-20T12:22:58.315648Z", "completed_at": "2023-04-20T12:23:02.063757Z"}], "thread_id": "Thread-1", "execution_time": 4.056847095489502, "adapter_response": {"_message": "OK"}, "message": "OK", "failures": null, "unique_id": "model.dbsql_dbt_tpch.DimSecurity"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2023-04-20T12:22:58.920598Z", "completed_at": "2023-04-20T12:22:58.940616Z"}, {"name": "execute", "started_at": "2023-04-20T12:22:58.941058Z", "completed_at": "2023-04-20T12:23:03.000091Z"}], "thread_id": "Thread-3", "execution_time": 4.373692035675049, "adapter_response": {"_message": "OK"}, "message": "OK", "failures": null, "unique_id": "model.dbsql_dbt_tpch.DimAccount"}, {"status": "error", "timing": [], "thread_id": "Thread-1", "execution_time": 1.0474705696105957, "adapter_response": {}, "message": "Runtime Error in model DimTrade (models/incremental/DimTrade.sql)\n  \n  [PARSE_SYNTAX_ERROR] Syntax error at or near '$'.(line 151, pos 0)\n  \n  == SQL ==\n  /* {\"app\": \"dbt\", \"dbt_version\": \"1.4.6\", \"dbt_databricks_version\": \"1.4.3\", \"databricks_sql_connector_version\": \"2.5.0\", \"profile_name\": \"user\", \"target_name\": \"default\", \"node_id\": \"model.dbsql_dbt_tpch.DimTrade\"} */\n  \n    \n      \n          create or replace table `dbt_shabbirkdb`.`DimTrade`\n        \n        \n      using delta\n        \n        \n        \n        \n        \n        \n        as\n        \n  SELECT\n    trade.tradeid,\n    sk_brokerid,\n    trade.sk_createdateid,\n    trade.sk_createtimeid,\n    trade.sk_closedateid,\n    trade.sk_closetimeid,\n    st_name status,\n    tt_name type,\n    trade.cashflag,\n    sk_securityid,\n    sk_companyid,\n    trade.quantity,\n    trade.bidprice,\n    sk_customerid,\n    sk_accountid,\n    trade.executedby,\n    trade.tradeprice,\n    trade.fee,\n    trade.commission,\n    trade.tax,\n    trade.batchid\n  FROM (\n    SELECT * EXCEPT(t_dts)\n    FROM (\n      SELECT\n        tradeid,\n        min(date(t_dts)) OVER (PARTITION BY tradeid) createdate,\n        t_dts,\n        coalesce(sk_createdateid, last_value(sk_createdateid) IGNORE NULLS OVER (\n          PARTITION BY tradeid ORDER BY t_dts)) sk_createdateid,\n        coalesce(sk_createtimeid, last_value(sk_createtimeid) IGNORE NULLS OVER (\n          PARTITION BY tradeid ORDER BY t_dts)) sk_createtimeid,\n        coalesce(sk_closedateid, last_value(sk_closedateid) IGNORE NULLS OVER (\n          PARTITION BY tradeid ORDER BY t_dts)) sk_closedateid,\n        coalesce(sk_closetimeid, last_value(sk_closetimeid) IGNORE NULLS OVER (\n          PARTITION BY tradeid ORDER BY t_dts)) sk_closetimeid,\n        cashflag,\n        t_st_id,\n        t_tt_id,\n        t_s_symb,\n        quantity,\n        bidprice,\n        t_ca_id,\n        executedby,\n        tradeprice,\n        fee,\n        commission,\n        tax,\n        batchid\n      FROM (\n        SELECT\n          tradeid,\n          t_dts,\n          if(create_flg, sk_dateid, cast(NULL AS BIGINT)) sk_createdateid,\n          if(create_flg, sk_timeid, cast(NULL AS BIGINT)) sk_createtimeid,\n          if(!create_flg, sk_dateid, cast(NULL AS BIGINT)) sk_closedateid,\n          if(!create_flg, sk_timeid, cast(NULL AS BIGINT)) sk_closetimeid,\n          CASE \n            WHEN t_is_cash = 1 then TRUE\n            WHEN t_is_cash = 0 then FALSE\n            ELSE cast(null as BOOLEAN) END AS cashflag,\n          t_st_id,\n          t_tt_id,\n          t_s_symb,\n          quantity,\n          bidprice,\n          t_ca_id,\n          executedby,\n          tradeprice,\n          fee,\n          commission,\n          tax,\n          t.batchid\n        FROM (\n          SELECT\n            t_id tradeid,\n            th_dts t_dts,\n            t_st_id,\n            t_tt_id,\n            t_is_cash,\n            t_s_symb,\n            t_qty AS quantity,\n            t_bid_price AS bidprice,\n            t_ca_id,\n            t_exec_name AS executedby,\n            t_trade_price AS tradeprice,\n            t_chrg AS fee,\n            t_comm AS commission,\n            t_tax AS tax,\n            1 batchid,\n            CASE \n              WHEN (th_st_id == \"SBMT\" AND t_tt_id IN (\"TMB\", \"TMS\")) OR th_st_id = \"PNDG\" THEN TRUE \n              WHEN th_st_id IN (\"CMPT\", \"CNCL\") THEN FALSE \n              ELSE cast(null as boolean) END AS create_flg\n          FROM `roberto_salcido_tpcdi_dlt_advanced_10_wh`.`TradeHistory` t\n          JOIN `roberto_salcido_tpcdi_dlt_advanced_10_wh`.`TradeHistoryRaw` th\n            ON th_t_id = t_id\n          UNION ALL\n          SELECT\n            t_id tradeid,\n            t_dts,\n            t_st_id,\n            t_tt_id,\n            t_is_cash,\n            t_s_symb,\n            t_qty AS quantity,\n            t_bid_price AS bidprice,\n            t_ca_id,\n            t_exec_name AS executedby,\n            t_trade_price AS tradeprice,\n            t_chrg AS fee,\n            t_comm AS commission,\n            t_tax AS tax,\n            t.batchid,\n            CASE \n              WHEN cdc_flag = 'I' THEN TRUE \n              WHEN t_st_id IN (\"CMPT\", \"CNCL\") THEN FALSE \n              ELSE cast(null as boolean) END AS create_flg\n          FROM `roberto_salcido_tpcdi_dlt_advanced_10_wh`.`TradeIncremental` t\n        ) t\n        JOIN `roberto_salcido_tpcdi_dlt_advanced_10_wh`.`DimDate` dd\n          ON date(t.t_dts) = dd.datevalue\n        JOIN `roberto_salcido_tpcdi_dlt_advanced_10_wh`.`DimTime` dt\n          ON date_format(t.t_dts, 'HH:mm:ss') = dt.timevalue\n      )\n    )\n    QUALIFY ROW_NUMBER() OVER (PARTITION BY tradeid ORDER BY t_dts desc) = 1\n  ) trade\n  JOIN `roberto_salcido_tpcdi_dlt_advanced_10_wh`.`StatusType` status\n    ON status.st_id = trade.t_st_id\n  JOIN `roberto_salcido_tpcdi_dlt_advanced_10_wh`.`TradeType` tt\n    ON tt.tt_id == trade.t_tt_id\n  -- Converts to LEFT JOIN if this is run as DQ EDITION. On some higher Scale Factors, a small number of Security symbols or Account IDs are missing from DimSecurity/DimAccount, causing audit check failures. \n  ${dq_left_flg} JOIN `dbt_shabbirkdb`.`DimSecurity` ds\n  ^^^\n    ON \n      ds.symbol = trade.t_s_symb\n      AND createdate >= ds.effectivedate \n      AND createdate < ds.enddate\n  ${dq_left_flg} JOIN `dbt_shabbirkdb`.`DimAccount` da\n    ON \n      trade.t_ca_id = da.accountid \n      AND createdate >= da.effectivedate \n      AND createdate < da.enddate\n    \n  ", "failures": null, "unique_id": "model.dbsql_dbt_tpch.DimTrade"}, {"status": "skipped", "timing": [], "thread_id": "Thread-1", "execution_time": 0.0, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbsql_dbt_tpch.FactHoldings"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2023-04-20T12:22:58.291272Z", "completed_at": "2023-04-20T12:22:58.309942Z"}, {"name": "execute", "started_at": "2023-04-20T12:22:58.310383Z", "completed_at": "2023-04-20T12:23:05.798618Z"}], "thread_id": "Thread-2", "execution_time": 7.793294906616211, "adapter_response": {"_message": "OK"}, "message": "OK", "failures": null, "unique_id": "model.dbsql_dbt_tpch.Financial"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2023-04-20T12:23:02.093282Z", "completed_at": "2023-04-20T12:23:02.112756Z"}, {"name": "execute", "started_at": "2023-04-20T12:23:02.113242Z", "completed_at": "2023-04-20T12:23:06.770297Z"}], "thread_id": "Thread-4", "execution_time": 4.953248023986816, "adapter_response": {"_message": "OK"}, "message": "OK", "failures": null, "unique_id": "model.dbsql_dbt_tpch.Prospect"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2023-04-20T12:23:06.087035Z", "completed_at": "2023-04-20T12:23:06.104259Z"}, {"name": "execute", "started_at": "2023-04-20T12:23:06.104699Z", "completed_at": "2023-04-20T12:23:10.251316Z"}], "thread_id": "Thread-1", "execution_time": 4.4528656005859375, "adapter_response": {"_message": "OK"}, "message": "OK", "failures": null, "unique_id": "model.dbsql_dbt_tpch.tempSumpFiBasicEps"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2023-04-20T12:23:03.301930Z", "completed_at": "2023-04-20T12:23:03.323199Z"}, {"name": "execute", "started_at": "2023-04-20T12:23:03.323714Z", "completed_at": "2023-04-20T12:23:10.362237Z"}], "thread_id": "Thread-3", "execution_time": 7.333671808242798, "adapter_response": {"_message": "OK"}, "message": "OK", "failures": null, "unique_id": "model.dbsql_dbt_tpch.FactCashBalances"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2023-04-20T12:23:07.049564Z", "completed_at": "2023-04-20T12:23:07.069070Z"}, {"name": "execute", "started_at": "2023-04-20T12:23:07.069559Z", "completed_at": "2023-04-20T12:23:11.024900Z"}], "thread_id": "Thread-2", "execution_time": 4.261520862579346, "adapter_response": {"_message": "OK"}, "message": "OK", "failures": null, "unique_id": "model.dbsql_dbt_tpch.DimCustomer"}, {"status": "error", "timing": [], "thread_id": "Thread-4", "execution_time": 1.0566835403442383, "adapter_response": {}, "message": "Runtime Error in model FactMarketHistory (models/incremental/FactMarketHistory.sql)\n  \n  [PARSE_SYNTAX_ERROR] Syntax error at or near '$'.(line 54, pos 0)\n  \n  == SQL ==\n  /* {\"app\": \"dbt\", \"dbt_version\": \"1.4.6\", \"dbt_databricks_version\": \"1.4.3\", \"databricks_sql_connector_version\": \"2.5.0\", \"profile_name\": \"user\", \"target_name\": \"default\", \"node_id\": \"model.dbsql_dbt_tpch.FactMarketHistory\"} */\n  \n    \n      \n          create or replace table `dbt_shabbirkdb`.`FactMarketHistory`\n        \n        \n      using delta\n        \n        \n        \n        \n        \n        \n        as\n        \n  SELECT \n    s.sk_securityid,\n    s.sk_companyid,\n    sk_dateid,\n    fmh.dm_close / sum_fi_basic_eps AS peratio,\n    (s.dividend / fmh.dm_close) / 100 yield,\n    fiftytwoweekhigh,\n    sk_fiftytwoweekhighdate,\n    fiftytwoweeklow,\n    sk_fiftytwoweeklowdate,\n    dm_close closeprice,\n    dm_high dayhigh,\n    dm_low daylow,\n    dm_vol volume,\n    fmh.batchid\n  FROM (\n    SELECT * FROM (\n      SELECT \n        a.*,\n        b.sk_dateid AS sk_fiftytwoweeklowdate,\n        c.sk_dateid AS sk_fiftytwoweekhighdate\n      FROM\n        `dbt_shabbirkdb`.`tempDailyMarketHistorical`a\n      JOIN  `dbt_shabbirkdb`.`tempDailyMarketHistorical` b \n        ON\n          a.dm_s_symb = b.dm_s_symb\n          AND a.fiftytwoweeklow = b.dm_low\n          AND b.dm_date between add_months(a.dm_date, -12) AND a.dm_date\n      JOIN  `dbt_shabbirkdb`.`tempDailyMarketHistorical` c \n        ON \n          a.dm_s_symb = c.dm_s_symb\n          AND a.fiftytwoweekhigh = c.dm_high\n          AND c.dm_date between add_months(a.dm_date, -12) AND a.dm_date) dmh\n    QUALIFY ROW_NUMBER() OVER (\n      PARTITION BY dm_s_symb, dm_date \n      ORDER BY sk_fiftytwoweeklowdate, sk_fiftytwoweekhighdate) = 1) fmh\n  -- Converts to LEFT JOIN if this is run as DQ EDITION. On some higher Scale Factors, a small number of Security Security symbols are missing from DimSecurity, causing audit check failures. \n  ${dq_left_flg} JOIN `dbt_shabbirkdb`.`DimSecurity` s \n  ^^^\n    ON \n      s.symbol = fmh.dm_s_symb\n      AND fmh.dm_date >= s.effectivedate \n      AND fmh.dm_date < s.enddate\n  LEFT JOIN  `dbt_shabbirkdb`.`tempSumpFiBasicEps` f \n    ON \n      f.sk_companyid = s.sk_companyid\n      AND quarter(fmh.dm_date) = quarter(fi_qtr_start_date)\n      AND year(fmh.dm_date) = year(fi_qtr_start_date)\n  ", "failures": null, "unique_id": "model.dbsql_dbt_tpch.FactMarketHistory"}, {"status": "error", "timing": [], "thread_id": "Thread-1", "execution_time": 0.9836618900299072, "adapter_response": {}, "message": "Runtime Error in model FactWatches (models/incremental/FactWatches.sql)\n  \n  [PARSE_SYNTAX_ERROR] Syntax error at or near '$'.(line 55, pos 0)\n  \n  == SQL ==\n  /* {\"app\": \"dbt\", \"dbt_version\": \"1.4.6\", \"dbt_databricks_version\": \"1.4.3\", \"databricks_sql_connector_version\": \"2.5.0\", \"profile_name\": \"user\", \"target_name\": \"default\", \"node_id\": \"model.dbsql_dbt_tpch.FactWatches\"} */\n  \n    \n      \n          create or replace table `dbt_shabbirkdb`.`FactWatches`\n        \n        \n      using delta\n        \n        \n        \n        \n        \n        \n        as\n        \n  SELECT\n    c.sk_customerid sk_customerid,\n    s.sk_securityid sk_securityid,\n    sk_dateid_dateplaced,\n    sk_dateid_dateremoved,\n    wh.batchid\n  FROM (\n    SELECT * EXCEPT(w_dts)\n    FROM (\n      SELECT\n        customerid,\n        symbol,\n        coalesce(sk_dateid_dateplaced, last_value(sk_dateid_dateplaced) IGNORE NULLS OVER (\n          PARTITION BY customerid, symbol ORDER BY w_dts)) sk_dateid_dateplaced,\n        coalesce(sk_dateid_dateremoved, last_value(sk_dateid_dateremoved) IGNORE NULLS OVER (\n          PARTITION BY customerid, symbol ORDER BY w_dts)) sk_dateid_dateremoved,\n        coalesce(dateplaced, last_value(dateplaced) IGNORE NULLS OVER (\n          PARTITION BY customerid, symbol ORDER BY w_dts)) dateplaced,\n        w_dts,\n        coalesce(batchid, last_value(batchid) IGNORE NULLS OVER (\n          PARTITION BY customerid, symbol ORDER BY w_dts)) batchid\n      FROM ( \n        SELECT \n          wh.w_c_id customerid,\n          wh.w_s_symb symbol,\n          if(w_action = 'ACTV', d.sk_dateid, null) sk_dateid_dateplaced,\n          if(w_action = 'CNCL', d.sk_dateid, null) sk_dateid_dateremoved,\n          if(w_action = 'ACTV', d.datevalue, null) dateplaced,\n          wh.w_dts,\n          batchid \n        FROM (\n          SELECT *, 1 batchid FROM `roberto_salcido_tpcdi_dlt_advanced_10_wh`.`WatchHistory`\n          UNION ALL\n          SELECT * except(cdc_flag, cdc_dsn) FROM `roberto_salcido_tpcdi_dlt_advanced_10_wh`.`WatchIncremental`) wh\n        JOIN `roberto_salcido_tpcdi_dlt_advanced_10_wh`.`DimDate` d\n          ON d.datevalue = date(wh.w_dts)))\n    QUALIFY ROW_NUMBER() OVER (PARTITION BY customerid, symbol ORDER BY w_dts desc) = 1) wh\n  -- Converts to LEFT JOINs if this is run as DQ EDITION. On some higher Scale Factors, a small number of Security symbols or Customer IDs \"may\" be missing from DimSecurity/DimCustomer, causing audit check failures. \n  ${dq_left_flg} JOIN `dbt_shabbirkdb`.`DimSecurity` s \n  ^^^\n    ON \n      s.symbol = wh.symbol\n      AND wh.dateplaced >= s.effectivedate \n      AND wh.dateplaced < s.enddate\n  ${dq_left_flg} JOIN `dbt_shabbirkdb`.`DimCustomer` c \n    ON\n      wh.customerid = c.customerid\n      AND wh.dateplaced >= c.effectivedate \n      AND wh.dateplaced < c.enddate\n  ", "failures": null, "unique_id": "model.dbsql_dbt_tpch.FactWatches"}], "elapsed_time": 22.232394218444824, "args": {"write_json": true, "use_colors": true, "printer_width": 80, "version_check": true, "partial_parse": true, "static_parser": true, "profiles_dir": "/usr/src/develop/.dbt", "send_anonymous_usage_stats": true, "quiet": false, "no_print": false, "cache_selected_only": false, "vars": "{}\n", "which": "run", "rpc_method": "run", "indirect_selection": "eager"}}