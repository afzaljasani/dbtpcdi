name: 'dbsql_dbt_tpch'
version: '1.0.0'
config-version: 2

profile: 'sql_endpoints'

on-run-start:
  - create table if not exists rstpcdistg.ProspectRaw (agencyid STRING COMMENT 'Unique identifier from agency', lastname STRING COMMENT 'Last name', firstname STRING COMMENT 'First name', middleinitial STRING COMMENT 'Middle initial', gender STRING COMMENT '‘M’ or ‘F’ or ‘U’', addressline1 STRING COMMENT 'Postal address', addressline2 STRING COMMENT 'Postal address', postalcode STRING COMMENT 'Postal code', city STRING COMMENT 'City', state STRING COMMENT 'State or province', country STRING COMMENT 'Postal country', phone STRING COMMENT 'Telephone number', income STRING COMMENT 'Annual income', numbercars INT COMMENT 'Cars owned', numberchildren INT COMMENT 'Dependent children', maritalstatus STRING COMMENT '‘S’ or ‘M’ or ‘D’ or ‘W’ or ‘U’', age INT COMMENT 'Current age', creditrating INT COMMENT 'Numeric rating', ownorrentflag STRING COMMENT '‘O’ or ‘R’ or ‘U’', employer STRING COMMENT 'Name of employer', numbercreditcards INT COMMENT 'Credit cards', networth INT COMMENT 'Estimated total net worth', batchid INT COMMENT 'Batch ID when this record was inserted')
  - create table if not exists rstpcdistg.AccountIncremental (cdc_flag STRING COMMENT 'Denotes insert or update', cdc_dsn BIGINT COMMENT 'Database Sequence Number', accountid BIGINT COMMENT 'Customer account identifier', ca_b_id BIGINT COMMENT 'Identifier of the managing broker', ca_c_id BIGINT COMMENT 'Owning customer identifier', accountDesc STRING COMMENT 'Name of customer account', TaxStatus TINYINT COMMENT 'Tax status of this account', ca_st_id STRING COMMENT 'Customer status type identifier', batchid INT COMMENT 'Batch ID when this record was inserted')
  - create table if not exists rstpcdiprod.BatchDate (batchdate DATE COMMENT 'Batch date', batchid INT COMMENT 'Batch ID when this record was inserted')
  - create table if not exists rstpcdiprod.CashTransactionHistory (ct_ca_id BIGINT COMMENT 'Customer account identifier', ct_dts TIMESTAMP COMMENT 'Timestamp of when the trade took place', ct_amt DOUBLE COMMENT 'Amount of the cash transaction.', ct_name STRING COMMENT 'Transaction name, or description e.g. Cash from sale of DuPont stock.')
  - create table if not exists rstpcdistg.CashTransactionIncremental (cdc_flag STRING COMMENT 'Denotes insert or update', cdc_dsn BIGINT COMMENT 'Database Sequence Number', ct_ca_id BIGINT COMMENT 'Customer account identifier', ct_dts TIMESTAMP COMMENT 'Timestamp of when the trade took place', ct_amt DOUBLE COMMENT 'Amount of the cash transaction.', ct_name STRING COMMENT 'Transaction name, or description e.g. Cash from sale of DuPont stock.', batchid INT COMMENT 'Batch ID when this record was inserted')
  - create table if not exists rstpcdistg.CustomerIncremental (cdc_flag STRING COMMENT 'Denotes insert or update', cdc_dsn BIGINT COMMENT 'Database Sequence Number', customerid BIGINT COMMENT 'Customer identifier', taxid STRING COMMENT 'Customer’s tax identifier', status STRING COMMENT 'Customer status type identifier', lastname STRING COMMENT 'Primary Customers last name.', firstname STRING COMMENT 'Primary Customers first name.', middleinitial STRING COMMENT 'Primary Customers middle initial', gender STRING COMMENT 'Gender of the primary customer', tier TINYINT COMMENT 'Customer tier', dob DATE COMMENT 'Customer’s date of birth, as YYYY-MM-DD.', addressline1 STRING COMMENT 'Address Line 1', addressline2 STRING COMMENT 'Address Line 2', postalcode STRING COMMENT 'Zip or postal code', city STRING COMMENT 'City', stateprov STRING COMMENT 'State or province', country STRING COMMENT 'Country', c_ctry_1 STRING COMMENT 'Country code for Customers phone 1.', c_area_1 STRING COMMENT 'Area code for customer’s phone 1.', c_local_1 STRING COMMENT 'Local number for customer’s phone 1.', c_ext_1 STRING COMMENT 'Extension number for Customer’s phone 1.', c_ctry_2 STRING COMMENT 'Country code for Customers phone 2.', c_area_2 STRING COMMENT 'Area code for Customer’s phone 2.', c_local_2 STRING COMMENT 'Local number for Customer’s phone 2.', c_ext_2 STRING COMMENT 'Extension number for Customer’s phone 2.', c_ctry_3 STRING COMMENT 'Country code for Customers phone 3.', c_area_3 STRING COMMENT 'Area code for Customer’s phone 3.', c_local_3 STRING COMMENT 'Local number for Customer’s phone 3.', c_ext_3 STRING COMMENT 'Extension number for Customer’s phone 3.', email1 STRING COMMENT 'Customers e-mail address 1.', email2 STRING COMMENT 'Customers e-mail address 2.', lcl_tx_id STRING COMMENT 'Customers local tax rate', nat_tx_id STRING COMMENT 'Customers national tax rate', batchid INT COMMENT 'Batch ID when this record was inserted')
  - create table if not exists rstpcdiprod.DailyMarketHistorical (dm_date DATE COMMENT 'Date of last completed trading day.', dm_s_symb STRING COMMENT 'Security symbol of the security', dm_close DOUBLE COMMENT 'Closing price of the security on this day.', dm_high DOUBLE COMMENT 'Highest price for the security on this day.', dm_low DOUBLE COMMENT 'Lowest price for the security on this day.', dm_vol INT COMMENT 'Volume of the security on this day.', batchid INT COMMENT 'Batch ID when this record was inserted')
  - create table if not exists rstpcdistg.DailyMarketIncremental (cdc_flag STRING COMMENT 'Denotes insert or update', cdc_dsn BIGINT COMMENT 'Database Sequence Number', dm_date DATE COMMENT 'Date of last completed trading day.', dm_s_symb STRING COMMENT 'Security symbol of the security', dm_close DOUBLE COMMENT 'Closing price of the security on this day.', dm_high DOUBLE COMMENT 'Highest price for the security on this day.', dm_low DOUBLE COMMENT 'Lowest price for the security on this day.', dm_vol INT COMMENT 'Volume of the security on this day.', batchid INT COMMENT 'Batch ID when this record was inserted')
  - create table if not exists rstpcdiprod.DimDate (sk_dateid BIGINT COMMENT 'Surrogate key for the date', datevalue DATE COMMENT 'The date stored appropriately for doing comparisons in the Data Warehouse', datedesc STRING COMMENT 'The date in full written form, e.g. July 7,2004', calendaryearid INT COMMENT 'Year number as a number', calendaryeardesc STRING COMMENT 'Year number as text', calendarqtrid INT COMMENT 'Quarter as a number, e.g. 20042', calendarqtrdesc STRING COMMENT 'Quarter as text, e.g. 2004 Q2', calendarmonthid INT COMMENT 'Month as a number, e.g. 20047', calendarmonthdesc STRING COMMENT 'Month as text, e.g. 2004 July', calendarweekid INT COMMENT 'Week as a number, e.g. 200428', calendarweekdesc STRING COMMENT 'Week as text, e.g. 2004-W28', dayofweeknum INT COMMENT 'Day of week as a number, e.g. 3', dayofweekdesc STRING COMMENT 'Day of week as text, e.g. Wednesday', fiscalyearid INT COMMENT 'Fiscal year as a number, e.g. 2005', fiscalyeardesc STRING COMMENT 'Fiscal year as text, e.g. 2005', fiscalqtrid INT COMMENT 'Fiscal quarter as a number, e.g. 20051', fiscalqtrdesc STRING COMMENT 'Fiscal quarter as text, e.g. 2005 Q1', holidayflag BOOLEAN COMMENT 'Indicates holidays')
  - create table if not exists rstpcdiprod.DimTime (sk_timeid BIGINT COMMENT 'Surrogate key for the time', timevalue STRING COMMENT 'The time stored appropriately for doing', hourid INT COMMENT 'Hour number as a number, e.g. 01', hourdesc STRING COMMENT 'Hour number as text, e.g. 01', minuteid INT COMMENT 'Minute as a number, e.g. 23', minutedesc STRING COMMENT 'Minute as text, e.g. 01:23', secondid INT COMMENT 'Second as a number, e.g. 45', seconddesc STRING COMMENT 'Second as text, e.g. 01:23:45', markethoursflag BOOLEAN COMMENT 'Indicates a time during market hours', officehoursflag BOOLEAN COMMENT 'Indicates a time during office hours')
  - create table if not exists rstpcdistg.FinWire (value STRING COMMENT 'Pre-parsed String Values of all FinWire files', rectype STRING COMMENT 'Indicates the type of table into which this record will eventually be parsed CMP, FIN, or SEC') PARTITIONED BY (rectype)
  - create table if not exists rstpcdiprod.HR (employeeid STRING COMMENT 'ID of employee', managerid STRING COMMENT 'ID of employee’s manager', employeefirstname STRING COMMENT 'First name', employeelastname STRING COMMENT 'Last name', employeemi STRING COMMENT 'Middle initial', employeejobcode STRING COMMENT 'Numeric job code', employeebranch STRING COMMENT 'Facility in which employee has office', employeeoffice STRING COMMENT 'Office number or description', employeephone STRING COMMENT 'Employee phone number')
  - create table if not exists rstpcdiprod.HoldingHistory (hh_h_t_id INT COMMENT 'Trade Identifier of the trade that originally created the holding row.', hh_t_id INT COMMENT 'Trade Identifier of the current trade', hh_before_qty INT COMMENT 'Quantity of this security held before the modifying trade.', hh_after_qty INT COMMENT 'Quantity of this security held after the modifying trade.')
  - create table if not exists rstpcdistg.HoldingIncremental (cdc_flag STRING COMMENT 'Denotes insert or update', cdc_dsn BIGINT COMMENT 'Database Sequence Number', hh_h_t_id INT COMMENT 'Trade Identifier of the trade that originally created the holding row.', hh_t_id INT COMMENT 'Trade Identifier of the current trade', hh_before_qty INT COMMENT 'Quantity of this security held before the modifying trade.', hh_after_qty INT COMMENT 'Quantity of this security held after the modifying trade.', batchid INT COMMENT 'Batch ID when this record was inserted')
  - create table if not exists rstpcdiprod.Industry (in_id STRING COMMENT 'Industry code', in_name STRING COMMENT 'Industry description', in_sc_id STRING COMMENT 'Sector identifier')
  - create table if not exists rstpcdiprod.StatusType (st_id STRING COMMENT 'Status code', st_name STRING COMMENT 'Status description')
  - create table if not exists rstpcdiprod.TaxRate (tx_id STRING COMMENT 'Tax rate code', tx_name STRING COMMENT 'Tax rate description', tx_rate FLOAT COMMENT 'Tax rate')
  - create table if not exists rstpcdiprod.TradeHistory (t_id BIGINT COMMENT 'Trade identifier.', t_dts TIMESTAMP COMMENT 'Date and time of trade.', t_st_id STRING COMMENT 'Status type identifier', t_tt_id STRING COMMENT 'Trade type identifier', t_is_cash TINYINT COMMENT 'Is this trade a cash (‘1’) or margin (‘0’) trade?', t_s_symb STRING COMMENT 'Security symbol of the security', t_qty INT COMMENT 'Quantity of securities traded.', t_bid_price DOUBLE COMMENT 'The requested unit price.', t_ca_id BIGINT COMMENT 'Customer account identifier.', t_exec_name STRING COMMENT 'Name of the person executing the trade.', t_trade_price DOUBLE COMMENT 'Unit price at which the security was traded.', t_chrg DOUBLE COMMENT 'Fee charged for placing this trade request.', t_comm DOUBLE COMMENT 'Commission earned on this trade', t_tax DOUBLE COMMENT 'Amount of tax due on this trade')
  - create table if not exists rstpcdiprod.TradeHistoryRaw (th_t_id BIGINT COMMENT 'Trade identifier. Corresponds to T_ID in the Trade.txt file', th_dts TIMESTAMP COMMENT 'When the trade history was updated.', th_st_id STRING COMMENT 'Status type identifier.')
  - create table if not exists rstpcdistg.TradeIncremental (cdc_flag STRING COMMENT 'Denotes insert or update', cdc_dsn BIGINT COMMENT 'Database Sequence Number', t_id BIGINT COMMENT 'Trade identifier.', t_dts TIMESTAMP COMMENT 'Date and time of trade.', t_st_id STRING COMMENT 'Status type identifier', t_tt_id STRING COMMENT 'Trade type identifier', t_is_cash TINYINT COMMENT 'Is this trade a cash (‘1’) or margin (‘0’) trade?', t_s_symb STRING COMMENT 'Security symbol of the security', t_qty INT COMMENT 'Quantity of securities traded.', t_bid_price DOUBLE COMMENT 'The requested unit price.', t_ca_id BIGINT COMMENT 'Customer account identifier.', t_exec_name STRING COMMENT 'Name of the person executing the trade.', t_trade_price DOUBLE COMMENT 'Unit price at which the security was traded.', t_chrg DOUBLE COMMENT 'Fee charged for placing this trade request.', t_comm DOUBLE COMMENT 'Commission earned on this trade', t_tax DOUBLE COMMENT 'Amount of tax due on this trade', batchid INT COMMENT 'Batch ID when this record was inserted')
  - create table if not exists rstpcdiprod.TradeType (tt_id STRING COMMENT 'Trade type code', tt_name STRING COMMENT 'Trade type description', tt_is_sell INT COMMENT 'Flag indicating a sale', tt_is_mrkt INT COMMENT 'Flag indicating a market order')
  - create table if not exists rstpcdiprod.WatchHistory (w_c_id BIGINT COMMENT 'Customer identifier', w_s_symb STRING COMMENT 'Symbol of the security to watch', w_dts TIMESTAMP COMMENT 'Date and Time Stamp for the action', w_action STRING COMMENT 'Whether activating or canceling the watch')
  - create table if not exists rstpcdistg.WatchIncremental (cdc_flag STRING COMMENT 'Denotes insert or update', cdc_dsn BIGINT COMMENT 'Database Sequence Number', w_c_id BIGINT COMMENT 'Customer identifier', w_s_symb STRING COMMENT 'Symbol of the security to watch', w_dts TIMESTAMP COMMENT 'Date and Time Stamp for the action', w_action STRING COMMENT 'Whether activating or canceling the watch', batchid INT COMMENT 'Batch ID when this record was inserted')
  - copy into rstpcdiprod.StatusType from (select _c0 as st_id, _c1 as st_name from 'dbfs:/tmp/tpcdi/sf=10/Batch1')
    fileformat = CSV pattern = 'StatusType.txt' format_options('header' = 'false', 'delimiter' = '|') 
  - copy into rstpcdiprod.TaxRate from (select _c0 as tx_id, _c1 as tx_name, _c2::float as tx_rate from 'dbfs:/tmp/tpcdi/sf=10/Batch1')
    fileformat = CSV pattern = 'TaxRate.txt' format_options('header' = 'false', 'delimiter' = '|') 
  - copy into rstpcdiprod.DimTime from (
    select
    _c0::BIGINT as sk_timeid,
    _c1::STRING as timevalue,
    _c2::INT as hourid,
    _c3::STRING as hourdesc,
    _c4::INT as minuteid,
    _c5::STRING as minutedesc,
    _c6::INT as secondid,
    _c7::STRING as seconddesc,
    _c8::BOOLEAN as markethoursflag,
    _c9::BOOLEAN as officehoursflag
    from
    'dbfs:/tmp/tpcdi/sf=10/Batch1'
    ) fileformat = CSV pattern = 'Time.txt' format_options('header' = 'false', 'delimiter' = '|')
  - copy into rstpcdistg.AccountIncremental
    from
    (
    select
      _c0 as cdc_flag,
      _c1::BIGINT as cdc_dsn,
      _c2::BIGINT as accountid,
      _c3::BIGINT as ca_b_id,
      _c4::BIGINT as ca_c_id,
      _c5 as accountDesc,
      _c6::TINYINT as TaxStatus,
      _c7 as ca_st_id,
      cast(
        substring(
          input_file_name()
          FROM
            (position('/Batch', input_file_name()) + 6) FOR 1
        ) as int
      ) batchid
    from
      'dbfs:/tmp/tpcdi/sf=10/Batch*'
    ) fileformat = CSV pattern = 'Account.txt' format_options('header' = 'false', 'delimiter' = '|')
  
  - copy into rstpcdiprod.CashTransactionHistory from (select 
     _c0::BIGINT as ct_ca_id ,
     _c1::TIMESTAMP as ct_dts ,
     _c2::DOUBLE as ct_amt ,
     _c3 as ct_name 
      from 'dbfs:/tmp/tpcdi/sf=10/Batch1')
          fileformat = CSV pattern = 'CashTransaction.txt' format_options('header' = 'false', 'delimiter' = '|')
  - copy into rstpcdistg.CashTransactionIncremental
    from
    (
    select
      _c0 as cdc_flag,
      _c1::BIGINT as cdc_dsn,
      _c2::BIGINT as ct_ca_id,
      _c3::TIMESTAMP as ct_dts,
      _c4::DOUBLE as ct_amt,
      _c5 as ct_name,
      cast(
        substring(
          input_file_name()
          FROM
            (position('/Batch', input_file_name()) + 6) FOR 1
        ) as int
      ) batchid
      from
      'dbfs:/tmp/tpcdi/sf=10/Batch2'
     ) fileformat = CSV pattern = 'CashTransaction.txt' format_options('header' = 'false', 'delimiter' = '|')
  - copy into rstpcdistg.CashTransactionIncremental
    from
    (
    select
      _c0 as cdc_flag,
      _c1::BIGINT as cdc_dsn,
      _c2::BIGINT as ct_ca_id,
      _c3::TIMESTAMP as ct_dts,
      _c4::DOUBLE as ct_amt,
      _c5 as ct_name,
      cast(
        substring(
          input_file_name()
          FROM
            (position('/Batch', input_file_name()) + 6) FOR 1
        ) as int
      ) batchid
      from
      'dbfs:/tmp/tpcdi/sf=10/Batch3'
     ) fileformat = CSV pattern = 'CashTransaction.txt' format_options('header' = 'false', 'delimiter' = '|')   
  - copy into rstpcdistg.CustomerIncremental
    from
    (
    select
      _c0 as cdc_flag,
      _c1::BIGINT as cdc_dsn,
      _c2::BIGINT as customerid,
      _c3 as taxid,
      _c4 as status,
      _c5 as lastname,
      _c6 as firstname,
      _c7 as middleinitial,
      _c8 as gender,
      _c9::TINYINT as tier,
      _c10::DATE as dob,
      _c11 as addressline1,
      _c12 as addressline2,
      _c13 as postalcode,
      _c14 as city,
      _c15 as stateprov,
      _c16 as country,
      _c17 as c_ctry_1,
      _c18 as c_area_1,
      _c19 as c_local_1,
      _c20 as c_ext_1,
      _c21 as c_ctry_2,
      _c22 as c_area_2,
      _c23 as c_local_2,
      _c24 as c_ext_2,
      _c25 as c_ctry_3,
      _c26 as c_area_3,
      _c27 as c_local_3,
      _c28 as c_ext_3,
      _c29 as email1,
      _c30 as email2,
      _c31 as lcl_tx_id,
      _c32 as nat_tx_id,
      cast(
        substring(
          input_file_name()
          FROM
            (position('/Batch', input_file_name()) + 6) FOR 1
        ) as int
      ) batchid
     from
      'dbfs:/tmp/tpcdi/sf=10/Batch*'
      ) fileformat = CSV pattern = 'Customer.txt' format_options('header' = 'false', 'delimiter' = '|')

  - copy into rstpcdiprod.DailyMarketHistorical from (
    select
    _c0::DATE as dm_date,
    _c1 as dm_s_symb,
    _c2::DOUBLE as dm_close,
    _c3::DOUBLE as dm_high,
    _c4::DOUBLE as dm_low,
    _c5::INT as dm_vol,
    1 as batchid
    from
    'dbfs:/tmp/tpcdi/sf=10/Batch1'
     ) fileformat = CSV pattern = 'DailyMarket.txt' format_options('header' = 'false', 'delimiter' = '|')
  - copy into rstpcdistg.DailyMarketIncremental
    from
    (
    select
      _c0 as cdc_flag,
      _c1::BIGINT as cdc_dsn,
      _c2::DATE as dm_date,
      _c3 as dm_s_symb,
      _c4::DOUBLE as dm_close,
      _c5::DOUBLE as dm_high,
      _c6::DOUBLE as dm_low,
      _c7::INT as dm_vol,
      cast(
        substring(
          input_file_name()
          FROM
            (position('/Batch', input_file_name()) + 6) FOR 1
        ) as int
      ) batchid
    from
      'dbfs:/tmp/tpcdi/sf=10/Batch2'
     )   fileformat = CSV pattern = 'DailyMarket.txt' format_options('header' = 'false', 'delimiter' = '|')
  - copy into rstpcdistg.DailyMarketIncremental
    from
    (
    select
      _c0 as cdc_flag,
      _c1::BIGINT as cdc_dsn,
      _c2::DATE as dm_date,
      _c3 as dm_s_symb,
      _c4::DOUBLE as dm_close,
      _c5::DOUBLE as dm_high,
      _c6::DOUBLE as dm_low,
      _c7::INT as dm_vol,
      cast(
        substring(
          input_file_name()
          FROM
            (position('/Batch', input_file_name()) + 6) FOR 1
        ) as int
      ) batchid
    from
      'dbfs:/tmp/tpcdi/sf=10/Batch3'
     )   fileformat = CSV pattern = 'DailyMarket.txt' format_options('header' = 'false', 'delimiter' = '|')   
  - copy into rstpcdiprod.DimDate from (select 
    _c0::BIGINT as sk_dateid,
    _c1::DATE as datevalue,
    _c2 as datedesc,
    _c3::INT as calendaryearid,
    _c4 as calendaryeardesc,
    _c5::INT as calendarqtrid,
    _c6 as calendarqtrdesc,
    _c7::INT as calendarmonthid,
    _c8 as calendarmonthdesc,
    _c9::INT as calendarweekid,
    _c10 as calendarweekdesc,
    _c11::INT as dayofweeknum,
    _c12 as dayofweekdesc,
    _c13::INT as fiscalyearid,
    _c14 as fiscalyeardesc,
    _c15::INT as fiscalqtrid,
    _c16 as fiscalqtrdesc,
    _c17::BOOLEAN as holidayflag
    from
    'dbfs:/tmp/tpcdi/sf=10/Batch1' ) fileformat = CSV pattern = 'Date.txt' format_options('header' = 'false', 'delimiter' = '|')
  - copy into rstpcdiprod.HR from (select _c0 as employeeid,
    _c1 as managerid,
    _c2 as employeefirstname,
    _c3 as employeelastname,
    _c4 as employeemi,
    _c5 as employeejobcode,
    _c6 as employeebranch,
    _c7 as employeeoffice,
    _c8 as employeephone from 'dbfs:/tmp/tpcdi/sf=10/Batch1')
    fileformat = CSV pattern = 'HR.csv' format_options('header' = 'false', 'delimiter' = ',')
  - copy into rstpcdiprod.HoldingHistory from
    (Select _c0::INT as hh_h_t_id,
    _c1::INT as hh_t_id,
    _c2::INT as hh_before_qty,
    _c3::INT as hh_after_qty from 'dbfs:/tmp/tpcdi/sf=10/Batch1')
    fileformat = CSV pattern = 'HoldingHistory.txt' format_options('header' = 'false', 'delimiter' = '|')
  - copy into rstpcdistg.HoldingIncremental
    from
    (
    select
      _c0 as cdc_flag,
    _c1::BIGINT as cdc_dsn,
    _c2::INT as hh_h_t_id,
    _c3::INT as hh_t_id,
    _c4::INT as hh_before_qty,
    _c5::INT as hh_after_qty,
      cast(
        substring(
          input_file_name()
          FROM
            (position('/Batch', input_file_name()) + 6) FOR 1
        ) as int
      ) batchid
    from
      'dbfs:/tmp/tpcdi/sf=10/Batch2'
    ) fileformat = CSV pattern = 'HoldingHistory.txt' format_options('header' = 'false', 'delimiter' = '|')
  - copy into rstpcdistg.HoldingIncremental
    from
    (
    select
      _c0 as cdc_flag,
    _c1::BIGINT as cdc_dsn,
    _c2::INT as hh_h_t_id,
    _c3::INT as hh_t_id,
    _c4::INT as hh_before_qty,
    _c5::INT as hh_after_qty,
      cast(
        substring(
          input_file_name()
          FROM
            (position('/Batch', input_file_name()) + 6) FOR 1
        ) as int
      ) batchid
    from
      'dbfs:/tmp/tpcdi/sf=10/Batch3'
    ) fileformat = CSV pattern = 'HoldingHistory.txt' format_options('header' = 'false', 'delimiter' = '|')
  - copy into rstpcdiprod.BatchDate
    from
    (
    select
      _c0::DATE as batchdate,
      cast(
        substring(
          input_file_name()
          FROM
            (position('/Batch', input_file_name()) + 6) FOR 1
        ) as int
      ) batchid
    from
      'dbfs:/tmp/tpcdi/sf=10/Batch*'
    )  fileformat = CSV pattern = 'BatchDate.txt' format_options('header' = 'false', 'delimiter' = '|')

  - copy into rstpcdiprod.Industry from
    (select _c0 as in_id,
    _c1 as in_name,
    _c2 as in_sc_id
    from
   'dbfs:/tmp/tpcdi/sf=10/Batch1' ) fileformat = CSV pattern = 'Industry.txt' format_options('header' = 'false', 'delimiter' = '|')
 
  - copy into rstpcdiprod.TradeHistory from (select _c0::BIGINT as t_id,
    _c1::TIMESTAMP as t_dts,
    _c2 as t_st_id,
    _c3 as t_tt_id,
    _c4::TINYINT as t_is_cash,
    _c5 as t_s_symb,
    _c6::INT as t_qty,
    _c7::DOUBLE as t_bid_price,
    _c8::BIGINT as t_ca_id,
    _c9 as t_exec_name,
    _c10::DOUBLE as t_trade_price,
    _c11::DOUBLE as t_chrg,
    _c12::DOUBLE as t_comm,
    _c13::DOUBLE as t_tax from 'dbfs:/tmp/tpcdi/sf=10/Batch1')
    fileformat = CSV pattern = 'Trade.txt' format_options('header' = 'false', 'delimiter' = '|')
  - copy into rstpcdiprod.TradeHistoryRaw from (
    select
    _c0::BIGINT as th_t_id,
    _c1::TIMESTAMP as th_dts,
    _c2 as th_st_id
    from
    'dbfs:/tmp/tpcdi/sf=10/Batch1'
    ) fileformat = CSV pattern = 'TradeHistory.txt' format_options('header' = 'false', 'delimiter' = '|')
  - copy into rstpcdistg.TradeIncremental
   from
   (
    select
     _c0 as cdc_flag,
    _c1::BIGINT as cdc_dsn,
    _c2::BIGINT as t_id,
    _c3::TIMESTAMP as t_dts,
    _c4 as t_st_id,
    _c5 as t_tt_id,
    _c6::TINYINT as t_is_cash,
    _c7 as t_s_symb,
    _c8::INT as t_qty,
    _c9::DOUBLE as t_bid_price,
    _c10::BIGINT as t_ca_id,
    _c11 as t_exec_name,
    _c12::DOUBLE as t_trade_price,
    _c13::DOUBLE as t_chrg,
    _c14::DOUBLE as t_comm,
    _c15::DOUBLE as t_tax,
      cast(
        substring(
          input_file_name()
          FROM
            (position('/Batch', input_file_name()) + 6) FOR 1
        ) as int
      ) batchid
    from
      'dbfs:/tmp/tpcdi/sf=10/Batch2'
   ) fileformat = CSV pattern = 'Trade.txt' format_options('header' = 'false', 'delimiter' = '|')
  - copy into rstpcdistg.TradeIncremental
   from
   (
    select
     _c0 as cdc_flag,
    _c1::BIGINT as cdc_dsn,
    _c2::BIGINT as t_id,
    _c3::TIMESTAMP as t_dts,
    _c4 as t_st_id,
    _c5 as t_tt_id,
    _c6::TINYINT as t_is_cash,
    _c7 as t_s_symb,
    _c8::INT as t_qty,
    _c9::DOUBLE as t_bid_price,
    _c10::BIGINT as t_ca_id,
    _c11 as t_exec_name,
    _c12::DOUBLE as t_trade_price,
    _c13::DOUBLE as t_chrg,
    _c14::DOUBLE as t_comm,
    _c15::DOUBLE as t_tax,
      cast(
        substring(
          input_file_name()
          FROM
            (position('/Batch', input_file_name()) + 6) FOR 1
        ) as int
      ) batchid
    from
      'dbfs:/tmp/tpcdi/sf=10/Batch3'
   ) fileformat = CSV pattern = 'Trade.txt' format_options('header' = 'false', 'delimiter' = '|')
  - copy into rstpcdiprod.TradeType from 
    (
     SELECT
     _c0 as tt_id,
    _c1 as tt_name,
    _c2::INT as tt_is_sell,
    _c3::INT as tt_is_mrkt
    from
    'dbfs:/tmp/tpcdi/sf=10/Batch1' ) fileformat = CSV pattern = 'TradeType.txt' format_options('header' = 'false', 'delimiter' = '|')

  - copy into rstpcdistg.WatchIncremental
    from
    (
    select
      _c0::STRING as cdc_flag,
    _c1::BIGINT as cdc_dsn,
    _c2::BIGINT as w_c_id,
    _c3::STRING as w_s_symb,
    _c4::TIMESTAMP as w_dts,
    _c5::STRING as w_action,
      cast(
        substring(
          input_file_name()
          FROM
            (position('/Batch', input_file_name()) + 6) FOR 1
        ) as int
      ) batchid
     from
      'dbfs:/tmp/tpcdi/sf=10/Batch2'
     ) fileformat = CSV pattern = 'WatchHistory.txt' format_options('header' = 'false', 'delimiter' = '|')

  - copy into rstpcdistg.WatchIncremental
    from
    (
    select
      _c0::STRING as cdc_flag,
    _c1::BIGINT as cdc_dsn,
    _c2::BIGINT as w_c_id,
    _c3::STRING as w_s_symb,
    _c4::TIMESTAMP as w_dts,
    _c5::STRING as w_action,
      cast(
        substring(
          input_file_name()
          FROM
            (position('/Batch', input_file_name()) + 6) FOR 1
        ) as int
      ) batchid
     from
      'dbfs:/tmp/tpcdi/sf=10/Batch3'
     ) fileformat = CSV pattern = 'WatchHistory.txt' format_options('header' = 'false', 'delimiter' = '|')
  - copy into rstpcdiprod.WatchHistory from 
    (Select
    _c0::BIGINT as w_c_id,
    _c1 as w_s_symb,
    _c2::TIMESTAMP as w_dts,
    _c3 as w_action
    from
    'dbfs:/tmp/tpcdi/sf=10/Batch1') fileformat = CSV pattern = 'WatchHistory.txt' format_options('header' = 'false', 'delimiter' = '|')
  - copy into rstpcdistg.FinWire
    from(
    select value, 
    substring(value, 16, 3) rectype
    from
    'dbfs:/tmp/tpcdi/sf=10/Batch1')
    fileformat = text pattern = 'FINWIRE[0-9][0-9][0-9][0-9]Q[1-4]'
  - copy into rstpcdistg.ProspectRaw from 
    (Select
    _c0 as agencyid,
    _c1 as lastname,
    _c2  as firstname,
    _c3 as middleinitial,
    _c4 as gender,
    _c5 as addressline1,
    _c6 as addressline2,
    _c7 as postalcode,
    _c8 as city,
    _c9 as state,
    _c10 as country,
    _c11 as phone,
    _c12 as income,
    _c13::int as numbercars,
    _c14::int as numberchildren,
    _c15 as maritalstatus,
    _c16::int as age,
    _c17::int as creditrating,
    _c18 as ownorrentflag,
    _c19 as employer,
    _c20::int as numbercreditcards,
    _c21::int as networth,
    cast(
        substring(
          input_file_name()
          FROM
            (position('/Batch', input_file_name()) + 6) FOR 1
        ) as int
      ) batchid

    from
    'dbfs:/tmp/tpcdi/sf=10/Batch*') fileformat = CSV pattern = 'Prospect.csv' format_options('header' = 'false', 'delimiter' = ',')         



model-paths: ["models"]
analysis-paths: ["analyses"]
test-paths: ["tests"]
seed-paths: ["seeds"]
macro-paths: ["macros"]
snapshot-paths: ["snapshots"]

target-path: "target"
clean-targets:
  - "target"
  - "dbt_packages"

vars:
  max_ship_date: "'1998-12-01'"

dispatch:
 - macro_namespace: dbt_utils
   search_order: ['dbsql_dbt_tpch', 'dbt_utils']